* PreSetup
** load path
Other manually download files are stored in directory other-els
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/other-els")
#+END_SRC
** OS variables
set up variables indicating current OS environment
#+BEGIN_SRC emacs-lisp
  (setq heartnheart/is-win32 (eq system-type 'windows-nt))
  (setq heartnheart/is-cygwin (eq system-type 'cygwin))
  (setq heartnheart/is-linux (or (eq system-type 'gnu/linux) (eq system-type 'linux)))
#+END_SRC

** Environment
#+BEGIN_SRC emacs-lisp
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/Git/bin")))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/Git/bin;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:/Program Files (x86)/Mozilla Firefox")))
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/CTEX/MiKTeX/miktex/bin")))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/CTEX/MiKTeX/miktex/bin;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/Python/Python-2.7.6")))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/Python/Python-2.7.6;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/Python/Python-2.7.6/Scripts")))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/Python/Python-2.7.6/Scripts;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/SumatraPDF")))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/SumatraPDF;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/Cygwin64/bin")))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/Cygwin64/bin;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:\XLZHANG\DevTools\Git\bin") ))
(setenv "PATH" (concat "C:\XLZHANG\DevTools\Git\bin;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/ImageMagick/ImageMagick-6.8.8-Q16") ))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/ImageMagick/ImageMagick-6.8.8-Q16;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/Bibtex2html") ))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/Bibtex2html;" (getenv "PATH")))
(setq exec-path (append exec-path '("C:/XLZHANG/DevTools/Ghostscript/gs9.14/bin") ))
(setenv "PATH" (concat "C:/XLZHANG/DevTools/Ghostscript/gs9.14/bin;" (getenv "PATH")))

#+END_SRC
** setup ELPA
#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu"         . "http://elpa.gnu.org/packages/")
          ("original"    . "http://tromey.com/elpa/")
          ("org"         . "http://orgmode.org/elpa/")
          ("marmalade"   . "http://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.milkbox.net/packages/")))
  (package-initialize)
  
  ;;------------------------------------------------------------------------------
  ;; On-demand installation of packages -- from binchen
  ;;------------------------------------------------------------------------------
  
  (defun require-package (package &optional min-version no-refresh)
    "Ask elpa to install given PACKAGE."
    (if (package-installed-p package min-version)
        t
      (if (or (assoc package package-archive-contents) no-refresh)
          (package-install package)
        (progn
          (package-refresh-contents)
          (require-package package min-version t)))))
#+END_SRC

#+RESULTS:
: require-package
** Personal Setting
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Xiaolong Zhang")
(setq user-mail-address "xlzhang@cs.hku.hk")
#+END_SRC
* Feature Setup
** emacs server
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))

#+END_SRC
** no splash screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen  t)
#+END_SRC
** emacs等宽字体设置
The best way to align org table containing Unicode character is to use
 a monospaced unicode font.
#+begin_src emacs-lisp
 (add-to-list 'default-frame-alist '(font . "YtYaHei:pixelsize=20"))
;   (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono:pixelsize=20"))
  
#+end_src

** 设置emacs默认浏览器
#+begin_src emacs-lisp
  (setq browse-url-generic-program (executable-find "firefox")
        browse-url-browser-function 'browse-url-generic)
#+end_src
** 鼠标滚轮修改字体大小
#+BEGIN_SRC emacs-lisp
  (if heartnheart/is-win32
      (progn 
              (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
              (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease))
    (progn
      (global-set-key (kbd "<C-mouse-4>") 'text-scale-increase)
      (global-set-key (kbd "<C-mouse-5>") 'text-scale-decrease)))
#+END_SRC
** 修改设置Mark的绑定
#+begin_src emacs-lisp
  ;; change S-SPC to set mark
  (global-set-key [?\S- ] 'set-mark-command)
#+end_src
** 修改M-W和C-W的行为
当选中区域的时候，它们表现为默认行为。否则对当前行操作。
#+begin_src emacs-lisp
  ;; set new method of kill a whole line 
  (defadvice kill-ring-save (before slickcopy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
  
  (defadvice kill-region (before slickcut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
  
#+end_src
** 设置启动时窗口的大小
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(width . 100))
  (add-to-list 'default-frame-alist '(height . 25))
#+END_SRC
** replace selected text when typing
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
** auto-mode-alist
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

** coding system for EN system
#+BEGIN_SRC emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
* Holiday
This should be put before load other packages, I don't know why. But
set  holidays later won't work
#+BEGIN_SRC emacs-lisp

(setq holiday-other-holidays
      '(
        (holiday-chinese 1 1 "CNY" )
        (holiday-fixed 1 1 "CNY")
        ))
#+END_SRC
* Packages Setup (BuiltIn)
** flyspell 
   #+begin_src emacs-lisp
     ;; use apsell as ispell backend
     (setq-default ispell-program-name "aspell")
     ;; use American English as ispell default dictionary
     (ispell-change-dictionary "american" t)
     (eval-after-load "flyspell"
       '(define-key flyspell-mode-map (kbd "C-M-i") nil))
     
   #+end_src
** flymake
#+BEGIN_SRC emacs-lisp
  (require 'flymake-cursor)
#+END_SRC
** spell check
   #+BEGIN_SRC emacs-lisp
   (setq ispell-program-name
         (cond ((equal system-name "XLZHANGHP") "C:/cygwin/bin/aspell")
               ((equal system-name "XLZHANGDELL") "aspell" )
               (heartnheart/is-win32 "D:/Software/cygwin/bin/aspell")
               (t "aspell")
               ))
   (setq ispell-personal-dictionary nil)   ;must use default location,
                                           ;other location does not work
                                           ;for me
   
   (require 'ispell)
   (global-set-key (kbd "<f8>") 'ispell-word)
   #+END_SRC
     
** ERC
#+BEGIN_SRC emacs-lisp
(require 'erc)


#+END_SRC

** shell mode

** gnus
#+BEGIN_SRC emacs-lisp
  (defun my-gnus-group-list-subscribed-groups ()
    "List all subscribed groups with or without un-read messages"
    (interactive)
    (gnus-group-list-all-groups 5)
    )
   (add-hook 'gnus-group-mode-hook
             ;; list all the subscribed groups even they contain zero un-read messages
             (lambda () (local-set-key "o" 'my-gnus-group-list-subscribed-groups ))
             )
#+END_SRC
* Packages Setup (ELPA)
** org-page
#+BEGIN_SRC emacs-lisp 
;; (require 'org-page)
;; (setq op/repository-directory "C:/XLZHANG/Homepages/heartnheart.github.io")
;; (setq op/site-domain "http://heartnheart.github.io/")
;; (setq op/personal-disqus-shortname "heartnheart")
#+END_SRC
** expand-region
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
** zenburn theme
  #+begin_src emacs-lisp
    (require-package 'zenburn-theme)
    (load-theme 'zenburn t)
  #+end_src
** autopair
   #+begin_src emacs-lisp
   ;; (require-package 'autopair)
   ;; (require 'autopair)
   ;; (autopair-global-mode)
   #+end_src
** smartparen
#+BEGIN_SRC emacs-lisp
(require 'smartparens-config)
(sp-local-pair 'org-mode "\\|" "\\|")
(sp-local-pair 'org-mode "'" nil :actions nil)
(sp-local-pair 'org-mode "`" nil :actions nil)
(sp-local-pair 'latex-mode "'" nil :actions nil)
(smartparens-global-mode)
#+END_SRC
** smex
   #+begin_src emacs-lisp
     (require-package 'smex)
     (require 'smex)
     (smex-initialize)
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'semx-major-mode-commands)
     ;; To use the old M-x
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
   #+end_src
** switch-window
   #+BEGIN_SRC emacs-lisp
     (require-package 'switch-window)
     (require 'switch-window)
   #+END_SRC
  
** ace-jump-mode
   #+BEGIN_SRC emacs-lisp
     (require-package 'ace-jump-mode)
     (require 'ace-jump-mode)
     (global-set-key (kbd "C-c j") 'ace-jump-mode)
   #+END_SRC
** org2blog
*** advice for org2blog-post
    #+BEGIN_SRC emacs-lisp :tangle no
      (defadvice org2blog/wp-post-buffer
       	(around crystal/wp-post-buffer-around activate)
       	"save flyspell state before post and restore it"
       	(let ((flyspell-state (and (boundp 'flyspell-mode) flyspell-mode)))
              (progn 
               	ad-do-it
               	(and flyspell-state (flyspell-mode 1)))))
    #+END_SRC
*** org2blog
    #+begin_src emacs-lisp :tangle no
      ;(add-to-list 'load-path "D:/home/.emacs.d/fromgit/org2blog")
      ;(require 'org2blog-autoloads)
      (setq org2blog/wp-blog-alist
	    '(("heartnheart"
	       :url "http://www.heartnheart.org/xmlrpc.php"
	       :username "speculation437"
	       :tags-as-categories nil)))
    #+end_src


** auto-complete
*** auto-complete pcomplete
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** Common settup
   #+BEGIN_SRC emacs-lisp
     (require-package 'auto-complete)
     (require 'auto-complete-config)
     (ac-config-default)
     (setq ac-use-menu-map t)
     (define-key ac-menu-map "\C-n" 'ac-next)
     (define-key ac-menu-map "\C-p" 'ac-previous)
     (setq ac-auto-start nil)
     (setq ac-delay 0.5)
     (require 'ac-math)
     
     (add-to-list 'ac-modes 'org-mode)   ; make auto-complete aware of `org-mode`
     
     
     (defun ac-org-mode-setup ()         ; add ac-sources to default ac-sources
       (setq ac-sources
          (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands )
                    ac-sources)))
     
     
     
     (add-hook 'org-mode-hook 'ac-org-mode-setup)
     
     ;; (require 'auto-complete-clang-async)
     
     ;; (defun ac-cc-mode-setup ()
     ;;   (setq ac-clang-complete-executable "/usr/local/bin/clang-complete")
     ;;   (setq ac-sources '(ac-source-clang-async))
     ;;   (ac-clang-launch-completion-process)
     ;; )
     
     ;; (defun my-ac-config ()
     ;;   (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
     ;;   (add-hook 'auto-complete-mode-hook 'ac-common-setup)
     ;;   (global-auto-complete-mode t))
     
     ;; (my-ac-config)
   #+END_SRC

** company-mode
   #+BEGIN_SRC emacs-lisp :tangle no
     (require-package 'company)
     (add-hook 'after-init-hook 'global-company-mode)
     (eval-after-load 'company
                        '(add-to-list 'company-backends 'company-cmake))
     (global-set-key (kbd "M-?") 'company-complete)
     
   #+END_SRC
** yasnippet
   #+BEGIN_SRC emacs-lisp
     (require-package 'yasnippet)
     (yas-global-mode 1)
   #+END_SRC
** smart-compile
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; (require-package 'smart-compile)
     ;; (require 'smart-compile)
     ;; (global-set-key (kbd "<f9>") 'smart-compile)
   #+END_SRC
** cmake mode
   #+BEGIN_SRC emacs-lisp
     (require-package 'cmake-mode)
     (require 'cmake-mode)
     (setq auto-mode-alist
           (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                     ("\\.cmake\\'" . cmake-mode))
                   auto-mode-alist))
   #+END_SRC
** cpputils-cmake
   #+BEGIN_SRC emacs-lisp 
     (require-package 'cpputils-cmake)
     (add-hook 'c-mode-hook (lambda () (cppcm-reload-all)))
     (add-hook 'c++-mode-hook (lambda () (cppcm-reload-all)))
     (message "CHANGED C++ MODE hook here!")
     ;; OPTIONAL, somebody reported that they can use this package with Fortran
     (add-hook 'c90-mode-hook (lambda () (cppcm-reload-all)))
     
     ;; ;; OPTIONAL, avoid typing full path when starting gdb
     ;; (global-set-key (kbd "C-c C-g")
     ;;  '(lambda ()(interactive) (gud-gdb (concat "gdb --annotate=3 --fullname " (cppcm-get-exe-path-current-buffer))))
     ;; )
   #+END_SRC

** wxwidgets-help
   #+BEGIN_SRC emacs-lisp
     (require-package 'wxwidgets-help)
     (global-set-key (kbd "C-c w")
                     '(lambda ()
                        (interactive)
                        (wxhelp-browse-class-or-api (thing-at-point 'symbol))))
   #+END_SRC

** AucTex
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-source-correlate-mode t)                                        ;(setq-default TeX-master nil)
(setq TeX-source-correlate-method 'synctex)
(setq TeX-view-program-list
      '(("Sumatra PDF" ("\"C:/XLZHANG/DevTools/SumatraPDF/SumatraPDF.exe\" -reuse-instance"
                      (mode-io-correlate " -forward-search %b %n ") " %o"))))


(if heartnheart/is-win32
    (setq TeX-engine-alist 
          '(
            (xetex "XeTeX" 
                   "xetex  --shell-escape" 
                   "xelatex --shell-escape" 
                   "xetex")
            (xetex_sh "XeTeX shell escape" 
                      "xetex --file-line-error --shell-escape" 
                      "xelatex --file-line-error --shell-escape" 
                      "xetex"))))


(eval-after-load "tex"
  '(progn
     (TeX-global-PDF-mode t)
     (assq-delete-all 'output-pdf TeX-view-program-selection)
     (add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF"))))


;(setq TeX-engine 'default)
        
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode) 


#+END_SRC
** RefTex
#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography '("~/research/references/references.bib"))
  (setq reftex-cite-format "\\citeA{%l}" )
#+END_SRC
** org mobile
*** src
#+BEGIN_SRC emacs-lisp
;; set the directory to interact with mobile org
(setq org-mobile-directory "~/org/MobileOrg")

;; 1. org-mobile-checksum-binary requires an absolute path for this
;; will be used in cmd on windows
;; 2. Currently Only works good on Windows, doesn't test on Linux

(setq org-mobile-checksum-binary (cond
                                  (heartnheart/is-win32 (expand-file-name "~/.emacs.d/extra-bin/sha1sum.exe"))
                                  (t "shasum")))
                             

(setq org-mobile-inbox-for-pull "~/org/refile.org")

;; the sync stuff
(add-hook 'after-init-hook 'org-mobile-pull)
(add-hook 'kill-emacs-hook 'org-mobile-push)


(defvar org-mobile-sync-timer nil)
(defvar org-mobile-sync-idle-secs (* 60 10))
(defun org-mobile-sync ()
  (interactive)
  (org-mobile-pull)
  (org-mobile-push))
(defun org-mobile-sync-enable ()
  "enable mobile org idle sync"
  (interactive)
  (setq org-mobile-sync-timer
        (run-with-idle-timer org-mobile-sync-idle-secs t
                             'org-mobile-sync)));
(defun org-mobile-sync-disable ()
  "disable mobile org idle sync"
  (interactive)
  (cancel-timer org-mobile-sync-timer))
(org-mobile-sync-enable)
#+END_SRC
*** TODO test org-mobile-checksum-binary for linux

** org latex pdf
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "bibtex %b"
                                "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  
                                          ;(setq org-latex-pdf-process (list "latexmk -pdf -bibtex %f"))
  (require 'ox-latex)
;  (add-to-list 'org-latex-packages-alist '("" "minted"))
;  (setq org-latex-listings 'minted)
#+END_SRC
** org beamer
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted" nil))
#+END_SRC
** org-mode by bh
#+BEGIN_SRC emacs-lisp
(load "org-mode.el")
(message "org-agendafiles = %s" org-agenda-files)
#+END_SRC



* Packages Setup (OWN)
** org-insert-raw-image
#+BEGIN_SRC emacs-lisp
(defvar org-clipboard-image-suffix 0)
(make-variable-buffer-local 'org-clipboard-image-suffix)
(setq-default org-clipboard-image-suffix 0)

(defun org-insert-clipboard-get-image-default-name ()
  (concat (file-name-base (buffer-file-name))
          "_"
          (format "%d" org-clipboard-image-suffix)
          ".png"))

(defun org-insert-clipboard-image (filename refname caption)
  (interactive (let* (
                      (i-filename   (read-string (format "Image Filename (%s): " (org-insert-clipboard-get-image-default-name)) nil nil (org-insert-clipboard-get-image-default-name)))
                      (i-filebase (concat "pasted-"
                                          (if (string-match "\\." i-filename)
                                              (substring i-filename 0 (string-match "\\." i-filename))
                                            i-filename)))
                      (i-refdefault (concat "pic:" i-filebase))
                      (i-refname (read-string (format "#+NAME (%s): " i-refdefault) nil nil i-refdefault))
                      (i-caption (read-string (format "#+CAPTION (%s): " i-filename) nil nil i-filename)))
                 (setq i-caption (capitalize (replace-regexp-in-string "_" " " i-filename)))
                 (unless (string-match "\\." i-filename) ;if file type
                                                         ;;not
                                                         ;specified,
                                                         ;use .png
                   (setq i-filename (concat i-filename ".png")))

                 (list i-filename i-refname i-caption)))
  (incf org-clipboard-image-suffix)

  (let* ((exit-status 
           (call-process "convert" nil nil nil 
                         "clipboard:" filename)))
    (save-excursion
      (end-of-line)
      (insert "\n")
      (insert (format "\n#+CAPTION: %s\n" caption))
      (insert (format "#+NAME: %s\n" refname))
      (org-insert-link nil (concat "file:" filename) ""))

    (insert (format "Figure [[%s]]" refname))
    (message "%s,%s" filename refname caption)))

#+END_SRC
** youdao dict
#+BEGIN_SRC emacs-lisp
  (defun yodao-dict-search-wordap (&optional word)
    "Use python script dict to look up word under point"
    (interactive)
    (or word (setq word (current-word)))
    ;; for python 27
    (if heartnheart/is-win32
        (shell-command (format (concat "python " (expand-file-name "~/.emacs.d/extra-bin/dict.py") " %s") word))
      ))
  (global-set-key [f5] 'yodao-dict-search-wordap)
#+END_SRC
** cdlatex 4.6
The latex version in marmalade is 4.0 with a bug with
last-command-char in it.
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Delete Current File To Trash
#+BEGIN_SRC emacs-lisp
  (defun delete-this-file-to-trash ()
     "Delete (move to trash) the file that is associated with the
    current buffer."
      (interactive)
      (let ((filename (buffer-file-name)))
        (move-file-to-trash filename t)
        (kill-buffer)))
#+END_SRC
** autohotkey
#+BEGIN_SRC emacs-lisp
  (autoload 'xahk-mode "xahk-mode" "Load xahk-mode for editing AutoHotkey scripts." t)
  (add-to-list 'auto-mode-alist '("\\.ahk\\'" . xahk-mode))
  (defalias 'ahk-mode 'xahk-mode) ; make it easier to remember.
#+END_SRC
* Coding Setup
** wxWidgets indenting clues
   #+begin_src emacs-lisp
     (require 'cc-mode)
     (add-to-list 'c++-font-lock-extra-types
                  "\\bwx[A-Z][a-z][a-zA-Z]*?\\b")
     (defun c-wx-line-up-topmost-intro-cont (langelem)
       (save-excursion
         (beginning-of-line)
         (if (re-search-forward "EVT_" (line-end-position) t)
             'c-basic-offset
           (c-lineup-topmost-intro-cont langelem))))
     
     (add-hook  'c++-mode-hook
                (lambda()
                  (c-set-offset 'topmost-intro-cont 'c-wx-line-up-topmost-intro-cont)))
     
   #+end_src
** C++ mode setings
    #+BEGIN_SRC emacs-lisp
      ;; (defun ac-complete-semantic-self-insert (arg)
      ;;   (interactive "p")
      ;;   (self-insert-command arg)
      ;;   (ac-complete-semantic))
      ;; (defun ac-complete-clang-self-insert(arg)
      ;;   (interactive "p")
      ;;   (self-insert-command arg)
      ;;   (ac-complete-clang))
      ;; (add-hook 'c++-mode-hook
      ;;           '(lambda ()
      ;;              (c-set-style "K&R")
      ;;              (setq tab-width 4)
      ;;              (setq indent-tabs-mode t)
      ;;              (setq c-basic-offset 4)
      ;;              (c-toggle-hungry-state 1)
      ;;         ;             (flyspell-prog-mode)       ;may conflict with auto-complete-mode
      ;;              (local-set-key (kbd "RET") 'newline-and-indent)
      ;;         ;                  (semantic-mode 1)
      ;;              (local-set-key "." 'ac-complete-clang-self-insert)
      ;;              (local-set-key ">" 'ac-complete-clang-self-insert)
      ;;              (local-set-key (kbd "C-c o") 'ff-find-other-file)
      ;;              ))
      ;; (require 'auto-complete-clang)
      ;; (setq ac-quick-help-delay 0.5)
      ;; (define-key ac-mode-map (kbd "M-/") 'auto-complete)
    #+END_SRC
** make `%' behave like in vi
   #+BEGIN_SRC emacs-lisp
     (global-set-key "%" 'match-paren)
     (defun match-paren (arg)
       "Go to the matching paren if on a paren; otherwise insert %."
       (interactive "p")
       (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
             ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
             (t (self-insert-command (or arg 1)))))
     
   #+END_SRC
** clang
   #+BEGIN_SRC emacs-lisp
     ;; ;;(setq ac-clang-executable "~/.emacs.d/extra-bin/clang/clang.exe")
     (require-package 'auto-complete-clang)
     (require 'auto-complete-clang)
     ;; ;; 添加c-mode和c++-mode的hook，开启auto-complete的clang扩展  
      (defun wttr/ac-cc-mode-setup ()  
        (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))  
     (add-hook 'c-mode-hook 'wttr/ac-cc-mode-setup)  
     (add-hook 'c++-mode-hook 'wttr/ac-cc-mode-setup)  
     
     
     ;(setq company-clang-arguments  (list
     ;; (setq ac-clang-flags   (list   
     ;;                        "-I/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/../../../../include/c++/4.8.1"
     ;;                        "-I/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/../../../../include/c++/4.8.1/i686-pc-linux-gnu"
     ;;                        "-I/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/../../../../include/c++/4.8.1/backward"
     ;;                        "-I/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include"
     ;;                        "-I/usr/local/include"
     ;;                        "-I/usr/lib/gcc/i686-pc-linux-gnu/4.8.1/include-fixed"
     ;;                        "-I/usr/include"
     ;;                        "-I/usr/lib/wx/include/gtk2-unicode-2.9"
     ;;                        "-I/usr/include/wx-2.9"
     ;;                        "-D_FILE_OFFSET_BITS=64"
     ;;                        "-DWXUSINGDLL"
     ;;                        "-D__WXGTK__"
     ;;                       ))
     
     
     (defadvice cppcm-reload-all (after append-stl-flags activate compile)
       (progn
         (setq command "echo | g++ -v -x c++ -E - 2>&1 |
                      grep -A 20 starts | grep include | grep -v search")
         (setq ac-clang-flags
               (append 
                (mapcar (lambda (item)
                          (concat "-I" item))
                        (split-string
                         (shell-command-to-string command)))
                ac-clang-flags)
               )
         ))
   #+END_SRC
   
* GTD
** org mode 8 
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)\\'" . org-mode))
   (require 'org)
   
   ;; common key bindings
   (global-set-key "\C-cl" 'org-store-link)
   (global-set-key "\C-cb" 'org-iswitchb)
   (global-set-key "\C-cc" 'org-capture)
   (global-set-key "\C-ca" 'org-agenda)
   
   
   ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
   (setq org-capture-templates
         (quote (("t" "Todo" entry (file "~/org/refile.org")
                  "* TODO %?\n%U\n%a\n")
                 ("n" "note" entry (file "~/org/refile.org")
                  "* %? :NOTE:\n%U\n%a\n")
                 
                 ("j" "Journal" entry (file+datetree "~/org/journal.org")
                  "* %?\n%U\n" )
   
                 )))
   
        
   
   (setq org-startup-indented t)           ;use org-indent-mode by default
   (setq org-export-with-smart-quotes t)
   ;; use sumatraPDF to open PDF
   (add-hook 'org-mode-hook
         '(lambda ()
            (local-unset-key "\C-c[")
            (local-unset-key "\C-c]")
            (delete '("\\.pdf\\'" . default) org-file-apps)
            (add-to-list 'org-file-apps
                         `("\\.pdf\\'" .
                           ,(cond (heartnheart/is-win32 "sumatraPDF -reuse-instance %s")
                                 (t "FoxitReader %s")
                                 )
                           )
                         )))
   (setq org-entities-user '(("space" "\\ " nil " " " " " " " ")))
          
   ;; Open thunderlink in org mode
   (require 'org)
   (org-add-link-type "thunderlink" 'org-thunderlink-open)
   (defun org-thunderlink-open (path)
   "open thunderlink"
       (shell-command
           (format "thunderbird -thunderlink thunderlink:%s" path
           )
       )
   )
   #+END_SRC
*** Emphasis is allowed in more lines
#+BEGIN_SRC emacs-lisp
(setcar (nthcdr 4 org-emphasis-regexp-components) 4)
(custom-set-variables `(org-emphasis-alist ',org-emphasis-alist))
#+END_SRC
** org cdlatex mode
#+BEGIN_SRC emacs-lisp

(defun change-org-cdlatex-keys ()

;  (define-key org-cdlatex-mode-map (kbd "'") 'cdlatex-math-symbol)
;  (define-key org-cdlatex-mode-map (kbd "`") 'org-cdlatex-math-modify)
  (define-key org-cdlatex-mode-map (kbd "_") nil)
  (define-key org-cdlatex-mode-map (kbd "^") nil)
  (add-to-list 'cdlatex-math-modify-alist 
             '(66 "\\mathbb" nil t nil nil))

  )

(add-hook 'cdlatex-mode-hook 'change-org-cdlatex-keys)
#+END_SRC
** org babel
*** change sh to cmd on windows
#+BEGIN_SRC emacs-lisp
(setq org-babel-sh-command "D:/Software/cygwin/bin/bash.exe")
#+END_SRC
** org drill
The Easiest way is to tick `org-drill' using customize of variable
`org-modules'. For manually set up, use `(require 'org-drill)'
** org publish
#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
      '(("org"
         :base-directory "~/org/"
         :publishing-directory "C:/XLZHANG/Homepages/localtest/"
         :section-numbers nil
         :base-extension "org"
         :auto-sitemap t
         :sitemap-filename "index.org"
         :sitemap-title "index"
         :sitemap-function org-publish-org-sitemap
         :link-home "index.html"
         :with-toc nil
         :publishing-function org-html-publish-to-html
         :html-head "<link rel=\"stylesheet\"
                         href=\"../other/mystyle.css\"
                         type=\"text/css\"/>")))
#+END_SRC

